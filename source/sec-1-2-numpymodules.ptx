<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the book                      -->
<!--                                                    -->
<!-- An Introduction to Matrix Computations in Python   -->
<!--                                                    -->
<!-- Copyright (C) 2023  LBCC                           -->
<!-- See the file copyright.txt for copying conditions. -->

<section xml:id="section-modules">
    
    <title>Python Packages and NumPy</title>

    <introduction>
        Python packages and libraries are collections of functions and modules centered around a common theme. 
        In this section we will learn how to import a Python package and use functions from that package.    
    </introduction>

    <objectives>
        <ul>
          <li>
            <p>
              Import a Python package or library (our example NumPy).
            </p>
          </li>
          <li>
            <p>
              Use functions from a Python package.
            </p>
          </li>
        </ul>
      </objectives>

      <subsection>
        <title>Importing the package NumPy</title>

        <p>
          NumPy is an open source scientific computing package that allows you to use standard 
          mathematical functions and constants like sine or pi. 
          NumPy also allows you to work with arrays of numbers so you can efficiently perform computations. 
        </p>

        <sage language='python'>
          <input>
            #first import the package numpy
            import numpy

            #compute sin(2) 
            x = numpy.sin(2)
            print(x)
          </input>
        </sage>


        <p>
          Note to call a function from an imported package you must use the syntax <c>package.function</c>.
          To avoid retyping the long name of a package every time, it is standard practice to rename the package as you import.  
        </p>

        <exercise>
          <p>
            Rename the package numpy in the above code by
            replacing the import line with <c>import numpy as np</c>. Next use the new name of the package to call the function <c>np.sin()</c> and re-run.
          </p>
        </exercise>

      </subsection>

      <subsection>
        <title>Standard functions in NumPy</title>

        <p>
          In addition to the standard trigonometric functions, 
          NumPy also contains <m>e^x</m> as <c>exp()</c> and natural log as <c>log()</c>, 
          as well as the standard mathematical constants like <c>pi</c> and <c>e</c>.
        </p>

        <exercise>
          <p> Use the NumPy package to compute the area of a circle using pi.  
          </p>

          <hint> If you import numpy as np, you will use np.pi
          </hint>

        </exercise>


        <sage language='python'>
          <input>
            #import the package numpy first - you fill in

            #decide the radius of the circle
            radius = 4
            
            #fill in the formula for the calculation here
            circle_area = 

            print(circle_area)
          </input>
        </sage>

      </subsection>

      <subsection>
        <title>NumPy arrays</title>

        <p>
          NumPy arrays can help us efficiently do computations with a collection of numbers all at once. 
          We can also represent vectors or matrices using NumPy arrays. 
          Run the code below that calls the NumPy function <c>array</c> to see how it works.
        </p>

        <sage language='python'>
          <input>
            import numpy as np
            
            #create an array containing the numbers 1, 2, 3, 4
            X = np.array([1,2,3,4])
            
            print(X)
            print(2*X)
          </input>
        </sage>

        <p>
          NumPy also has built in functions to automatically create an array with certain conditions.
          For example <c>linspace()</c> takes a given interval and sets up an array of evenly spaced numbers on that interval. 
        </p>

        <sage language='python'>
          <input>
            import numpy as np

            #create array of 11 evenly spaced numbers between 0 and 5
            X = np.linspace(0,5,num=11) 
             
            print(X)
          </input>
        </sage>

        <p>
          Note that the array includes 5, so it takes 11 evenly spaced numbers to get numbers 0.5 apart. 
          Note also that although the number values are evenly spaced, the printed array is not. 
          Namely the default is to space out the entries by the maximum number of decimal places with blank spaces instead of extra zeroes. 
        </p>

        <exercise>
          <p>
            Edit the above code to use linspace to create an array of numbers between 0 and 5 that are one-quarter apart. 
            When you evaluate your code should print the list 0, 0.25, 0.5, 0.75, etc.
          </p>
        </exercise>

        <p>
          Another way to create an array of values for a given interval is <c>arange()</c>, which uses a step value to 
          set up a sequence of numbers within that interval. 
        </p>

        <sage language='python'>
          <input>
            import numpy as np

            #create array of numbers between 0 and 5 with step size 2 
            X = np.arange(0,5,step=2) 
             
            print(X)
          </input>
        </sage>

        <p>
          Note that the array gets cut off before the right endpoint of the interval if your stepsize doesn't divide the interval evenly. 
        </p>

        <exercise>
          <p>
            Edit the above code to use <c>arange</c> to create an array of numbers between 0 and 5 that are one-quarter apart. 
            When you evaluate your code should print the list 0, 0.25, 0.5, 0.75, etc.          </p>
        </exercise>

        
      </subsection>



      <conclusion>
        <p> You can find more information about the package NumPy at 
          <url href="https://numpy.org/" visual="numpy.org"/>. 
          Python's wiki has a list of other commonly used <url href="https://wiki.python.org/moin/UsefulModules" visual="wiki.python.org/moin/UsefulModules">modules and packages</url>.
        </p>
      </conclusion>


      <assemblage><!--to assemble or summarize important connected ideas-->
        <title> Summary </title>
        <p>
        <ul>
          <li>
            <p>
              You can import a Python package and rename it by using <c>import package as name</c>. 
            </p>
          </li>
          <li>
            <p>
                You can call a function from a package using <c>packagename.function</c>
            </p>
          </li>
          <li>
            <p>
                Numpy arrays can help us efficiently do computations. 
            </p>
          </li>
          <li>
            <p>
                The Numpy functions <c>linspace()</c> and <c>arange()</c> set up an array of values over an interval.
            </p>
          </li>
        </ul>
      </p>
      </assemblage>

      <exercises xml:id="exercises-modules">
        <exercise>
          <p> Research NumPy</p>
          <ol>
            <li>
              <p>
                Look up how to efficiently create a 15 element array of all <m>1</m>'s.
              </p>
            </li>
            <li>
              <p>
                Use this to create a 15 element array of all <m> 100</m>'s. 
              </p>
            </li>
          </ol>
            
          <sage language='python'>
            <input>
              #
              #
              #
              #
              #
            </input>
          </sage>
          <solution>
            <p>
              <ol>
                <li>
                  <p>
                    There is more than one way to do this. One approach is to use the <c>numpy</c> function <c>ones().</c>
                  </p>
                </li>
                <li>
                  <p>
                    Once you have an array of all 1's, you can multiply it by any number you want. 
                  </p>
                </li>
              </ol>
            </p>
          </solution>
        </exercise>
        
        

        <exercise>
          <p>
          The magnitude of an earthquake is measured using the Richter Scale, which is a logarithmic scale. 
          The amount of energy <m>E</m> in <emph>ergs</emph> an earthquake releases can be determined from the magnitude <m>M</m>
          using the formula 
          </p>
          <me> \log_{10}(E)=11.8+1.5M</me>
          <p>
            The <url href="https://earthquake.usgs.gov/earthquakes/map">USGS</url> 
            website lets you download magnitude data for the 30 most recent earthquakes in the world with magnitude <m>>2.5</m>.  
          </p>
          <p>
            Use Numpy to determine how much energy has been released in the 30 most recent earthquakes. 
            <em>Note that you can copy and paste data from a csv file into SageMathCell. 
              You will just need to then format that data for Numpy.</em>  
          </p>

          <sage language='python'>
            <input>
              #
              #
              #
              #
              #
            </input>
          </sage>
        </exercise>
        
      </exercises>





</section>