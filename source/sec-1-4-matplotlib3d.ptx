<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the book                      -->
<!--                                                    -->
<!-- An Introduction to Matrix Computations in Python   -->
<!--                                                    -->
<!-- Copyright (C) 2023  LBCC                           -->
<!-- See the file copyright.txt for copying conditions. -->

<section xml:id="section-matplotlib3d">
    
    <title>Matplotlib and 3D graphing</title>

    <introduction>
        Now that we have some experience making 2D graphs, let's learn how to make 3D graphs. 
        Note that you can graph both curves and surfaces in 3D, depending on what you are trying to describe.  
        If you have taken a multivariable class hopefully you remember that surfaces arise as solutions to equations of three variables,
        while points on a space curve are either traced out by a vector-valued function or plotted by a set of three parametric equations. 
        The code for the points on a space curve is a little more straightforward so we will start with those examples in this section. 
         
    </introduction>

    <objectives>
        <ul>
          <li>
            <p>
              Use Matplotlib to graph surfaces in 3D. 
            </p>
          </li>
          <li>
            <p>
              Use Matplotlib to graph parametric curves in 3D.
            </p>
          </li>
        </ul>
      </objectives>

      <subsection xml:id="subsec-3Daxes">
        <title>3D axes</title>

        <p>
          First, for 3D graphs we will need to add 3D axes to our figure using the keyword <c>projection='3d'</c>.
          Run the code below to see the default 3D axes. 
        </p>

        <sage language='python'>
          <input>
              import matplotlib.pyplot as plt #import pyplot
              import numpy as np 

              fig = plt.figure() #create a figure
              ax = plt.axes(projection='3d') #add a 3D axis

              plt.show() #display the result
          </input>
        </sage>
        
      </subsection>

      <subsection xml:id="subsec-3DParam">
        <title>Parametric Curves in 3D</title>

        <p>
          Matplotlib graphs 3D curves by plotting points and connecting the dots.
          The <m>x</m>, <m>y</m>, and <m>z-</m>coordinates are still given by NumPy arrays and then plotted on the axes.
        </p>

        <p>
          Run the code below to graph the equation of a line between the points <m>(1,1,1)</m> and <m>(2,3,4)</m>.
        </p>

        <sage>
          <input>
            import matplotlib.pyplot as plt
            import numpy as np

            fig = plt.figure() #create a figure
            ax = plt.axes(projection='3d') #add a 3D axis

            X = [1,2] #determine two x-values for the line
            Y = [1,3] #determine two y-values for the line
            Z = [1,4] #determine two z-values for the line

            ax.plot(X,Y,Z)
            plt.show()
            
          </input>
        </sage>

        <exercise>
          <p>
            Edit the above code to graph the equation of a line between the points <m>(1,2,3)</m> and <m>(4,5,6)</m>. 
          </p>
        </exercise>

        <exercise>
          <p>
            Edit the above code to add a third number to each numpy array. 
            What happens? Can you explain what <c>plot()</c> just graphed? 
          </p>
        </exercise>

        <p> We can also graph curves by making coordinates dependent on another. 
          For example, the curve below looks like a parabola in the <m>z</m>-direction above the shadow <m>y=x</m>
        </p>

        <sage>
          <input>
            import matplotlib.pyplot as plt
            import numpy as np

            fig = plt.figure() #create a figure
            ax = plt.axes(projection='3d') #add a 3D axis

            X = np.linspace(-6,6, num=10) #10 x-values
            Y = X #corresponding y-values along y=x
            Z = X**2 #corresponding z-values

            ax.plot(X,Y,Z)
            plt.show()
            
          </input>
        </sage>

        <p>
          As before, you might need more inputs to get a smooth curve. 
        </p>
        <p>
          Last, we sometimes introduce a parameter (or new input variable), <m>t</m>,
          and write all three coordinates in terms of that new parameter. Hence the term <q>parametric curves</q>.
          For example, we can graph a horizontal circle at <m>z=1</m> using 
          <ul>
            <li>
              <m>x=\cos(t)</m>
            </li>
            <li>
              <m>y=\sin(t)</m>
            </li>
            <li>
              <m>z=1</m>
            </li>
          </ul>
        </p>

        <sage>
          <input>
            import matplotlib.pyplot as plt
            import numpy as np

            fig = plt.figure() #create a figure
            ax = plt.axes(projection='3d') #add a 3D axis

            T=np.linspace(0,2*np.pi, num=25) #25 input parameter values
            X = np.cos(T) #corresponding x-values
            Y = np.sin(T) #corresponding y-values 
            Z = 1 #corresponding z-values

            ax.plot(X,Y,Z)
            plt.show()
            
          </input>
        </sage>

        <exercise>
          <p>
            Play with the above code for <m>x</m>, <m>y</m>, and <m>z</m> to see what other interesting curves you can create.  
          </p>
          <p>
            In particular, when you have the parameter <m>t</m>, can you create 
            <ul>
              <li>
                a line?
              </li>
              <li>
                a spiral?
              </li>
              <li>
                a parabola?
              </li>
              <li>
                a different circle?
              </li>
            </ul> 
          </p>
        </exercise>


      </subsection>



      <subsection xml:id="subsec-Graphing-a-surface">
        <title>Surfaces and scatterplots in 3D</title>
        
        <p>
          To graph a surface or 3D scatterplot, we will need two-dimensional numpy arrays for all of our inputs and outputs.
          As a shortcut we can create 1-d arrays for the <m>x</m> and <m>y</m> inputs first, then use NumPy's function <c>meshgrid()</c> to create a coordinate grid of inputs. Last we define our outputs on that grid.
        </p>
        <p>
          The function <c>scatter()</c> will plot a scatterplot just like in 2D.
          The function <c>plot_surface()</c> plots the points and connect those dots with a surface.  
          Just like you need enough points to get a curve that looks smooth, 
          we will need enough points to get a surface that looks smooth.
        </p>

        <exercise>
          <p> Run the code below trying both the command <c>plot_surface()</c> (given) and <c>scatter()</c> to see the difference.  
          </p>
        </exercise>


        <sage language='python'>
          <input>
              import matplotlib.pyplot as plt #import pyplot
              import numpy as np 

              fig = plt.figure() #create a figure
              ax = plt.axes(projection='3d') #add a 3D axis
              X = np.arange(-2,2,step=0.25) #determine x-inputs
              Y = np.arange(-2,2,step=0.25) #determine y-inputs
              X,Y = np.meshgrid(X,Y) #make coordinate grid of inputs
              Z = X**2+Y**2 #determine outputs x^2+y^2

              ax.plot_surface(X,Y,Z) #plot surface
              plt.show() #display the result
          </input>
        </sage>

        <exercise>
          <p> For the surface, increase the step in each input and run the above code again. 
            When does the surface start to look <q>polygonal</q> instead of smooth?  
          </p>
        </exercise>

        <exercise>
          <p> Modify the above code to graph the surface <m>z=sin(y)</m>.
            Choose a reasonable range of inputs that shows the important features of the graph.   
          </p>
        </exercise>

        <exercise>
          <p> Change the surface to <m>z=sin(xy)</m>. 
            What step size is needed to make the input window [-2,2] and [-2,2] display a smooth surface? 
          </p>
        </exercise>

        <p>
          As in the 2D case, the function <c>scatter()</c> plots the points without connecting the dots. 
        </p>

      </subsection>

      <subsection xml:id="subsec-3DAxesandLabels">
        <title>Axes and Labels</title>
        
      </subsection>




      <p>
        what
      </p>

      <assemblage><!--to assemble or summarize important connected ideas-->
        <title> Summary </title>
        <p>
        <ul>
          <li>
            <p>
              blah 
            </p>
          </li>
        </ul>
        <ul>
          <li>
            <p>
              You can use <c>numpy.meshgrid()</c> to create  input coordinates on a grid.
            </p>
          </li>
          <li>
            <p>
              As before you need enough points for <c>plot_surface()</c> or <c>plot()</c> to make smooth graphs. 
            </p>
          </li>
        </ul>
      </p>
      </assemblage>



</section>