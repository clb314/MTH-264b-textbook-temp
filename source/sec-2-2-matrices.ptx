<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the book                      -->
<!--                                                    -->
<!-- An Introduction to Matrix Computations in Python   -->
<!--                                                    -->
<!-- Copyright (C) 2023  LBCC                           -->
<!-- See the file copyright.txt for copying conditions. -->

<section xml:id="section-matrices">
    
    <title>Matrix Arithmetic</title>

    <introduction>
        Matrices have emerged as an essential mathematical tool to model complicated systems and solve problems 
        far beyond the early usage to simplify the process of solving systems of linear equations. 
        In this section we will learn how to use both SymPy and NumPy to perform matrix arithmetic. 
        We will briefly discuss possible numerical pitfalls and what to watch out for.   
    </introduction>

    <objectives>
        <ul>
          <li>
            <p>
              Add, subtract, scale, and multiply matrices in NumPy and SymPy
            </p>
          </li>
          <li>
            <p>
              Find matrix inverses using NumPy and SymPy
            </p>
          </li>
          <li>
            <p>
              Use matrix inverses to solve systems of linear equations
            </p>
          </li>
        </ul>
      </objectives>

      <subsection>
        <title>NumPy vs SymPy</title>

        <p>
          We can compute with matrices in both the Sympy and Numpy libraries. 
          Numerical Python is intended for numerical computations and estimates. 
          Symbolic Python can do symbolic computations like <c>rref()</c> or compute with matrices having undetermined variables in the mix.
          NumPy automatically treats matrices like a 2D array, that is, a higher dimensional vector. 
          SymPy defaults to working with matrices from the linear transformation perspective.  
        </p>

        <p>
          After some internal debate, I decided to intermingle NumPy and SymPy syntax for working with matrices. 
          Please give feedback if it seems this section should be re-organized into <em>NumPy and Matrics</em> 
          followed by <em>SymPy and Matrices</em>.
        </p>

      </subsection>
      <subsection xml:id="subsec-BasicMatrices">
        <title>Basic Matrices</title>
        <p> 
          Some matrices are frequently needed for computations. 
          Common matrices that we can generate automatically include a (multiplicative) identity matrix,
          a zero matrix, and a matrix of all ones. 
        </p>

        <p>
          The commands for the <m>n\times n</m> multiplicative identity matrix are different: 
          SymPy's <c>eye(n)</c> vs NumPy's <c>identity(n)</c>. 
        </p>
        

        <sage language='python'>
          <input>
            import numpy as np
            import sympy as sp
            npIdentity = np.identity(7)
            spIdentity = sp.eye(4)
            
            print(npIdentity)
            print(spIdentity)
            
     
          </input>
        </sage>

        <p>
          The commands for matrices of <c>ones()</c> and <c>zeros()</c> are identical, 
          and take in the number of rows and columns as arguments. 
          For NumPy, however, you must enter the shape of the array as an ordered pair with parentheses.
        </p>

        
        <exercise>
          <p>
            In the code above, create a <m>3 \times 4</m> matrix of all ones using both NumPy and SymPy. 
            Next create a matrix of all zeroes.  
          </p>
          <p>
            Play with various dimensions.
          </p>
          <hint>
            <p>
              With NumPy don't forget to use extra parentheses for the shape of the array. 
            </p>
          </hint>
        </exercise>

      </subsection>
      <subsection xml:id="subsec-MatrixArithmetic">
        <title>Matrix Arithmetic</title>

        <p>
          You can add, subtract and scale matrices using both NumPy and SymPy. 
        </p>

          <exercise>
            <p> 
              In both NumPy and SymPy create matrices to compute
              <me>
                \left[
                \begin{matrix}
                5 \amp 5 \amp 5 \amp 5 \\
                5 \amp 5 \amp 5 \amp 5 \\
                5 \amp 5 \amp 5 \amp 5 \\
                5 \amp 5 \amp 5 \amp 5 \\
                \end{matrix}
                \right] +
                \left[
                \begin{matrix}
                2 \amp 0 \amp 0 \amp 0 \\
                0 \amp 2 \amp 0 \amp 0 \\
                0 \amp 0 \amp 2 \amp 0 \\
                0 \amp 0 \amp 0 \amp 2 \\
                \end{matrix}
                \right].
              </me> 
            </p>
            <hint>
              <p>
                Scale a one matrix and an identity matrix. 
              </p>
            </hint>

          </exercise>
          <sage language='python'>
            <input>
              import numpy as np
              # create numpy arrays and try it out
              # add, subtract, scale
              #
              # print
  
            </input>
          </sage>
  
          <sage language='python'>
            <input>
              import sympy as sp
              # create sympy matrices and try it out
              # add, subtract, scale
              #
              # print
  
            </input>
          </sage>
          <exercise>
            <p>
              What happens if the two matrices do not have the same number of rows and columns? 
            </p>
          </exercise>
          
        
      </subsection>
      <subsection xml:id="subsec-MatrixMultiplication">
        <title>Matrix Multiplication</title>

        <p>
          Recall that matrix multiplication is more sophisticated than the Hadamard product, a basic element-wise multiplication of two arrays, 
         since it developed to be independent of coordinates and correspond to function composition. 
          Recall further that NumPy automatically treats matrices like a 2D array, that is, a higher dimensional vector. 
          If you naively multiply NumPy arrays you get the Hadamard product, rather than traditional matrix multiplication (try below). 
        </p>

        <sage language='python'>
          <input>
            import numpy as np

            A = np.array([[1,2,3], [4,5,6]])
            B = np.array([[0,0,0],[1,1,1]])
            # C = np.array([[2,0], [2,0],[2,0]])

            print(A*B)

          </input>
        </sage>
        <p>
          If instead you want matrix multiplication, you tell NumPy to multiply using the <c>matmul()</c>
          command, or as a short-hand using <c>@</c> (try below).
        </p>

        <sage language='python'>
          <input>
            import numpy as np

            A = np.array([[1,2,3], [4,5,6]])
            # B = np.array([[0,0,0],[1,1,1]])
            C = np.array([[2,0], [2,0],[2,0]])

            print(np.matmul(A,C))
            #print(A@C)

          </input>
        </sage>

        <p>
          Meanwhile SymPy defaults to working with matrices from the linear transformation perspective 
          giving you matrix multiplication by default and requiring us to specify any 
          Hadamard product, or element-wise multiplication.
        </p>

        <sage language='python'>
          <input>
            import sympy as sp

            A = sp.Matrix([[1,2,3], [4,5,6]])
            # B = sp.Matrix([[0,0,0],[1,1,1]])
            C = sp.Matrix([[2,0], [2,0],[2,0]])

            print(A*C)

          </input>
        </sage>

        <sage language='python'>
          <input>
            import sympy as sp

            A = sp.Matrix([[1,2,3], [4,5,6]])
            B = sp.Matrix([[0,0,0],[1,1,1]])
            # C = sp.Matrix([[2,0], [2,0],[2,0]])

            print(A.multiply_elementwise(B))

          </input>
        </sage>

        <exercise>
          <p>
            <ul>
              <li>
                <p>
                  What happens if you try to compute <m>AB</m> using matrix multiplication? 
                </p>
              </li>
              <li>
                <p>
                  What happens if you try to compute the Hadamard Product of <m>A*C</m>?
                </p>
              </li>
            </ul>
            Play with various dimensions of 
            <m>A</m>, <m>B</m> and <m>C</m> to come up with necessary criteria for the Hadamard product to work vs Matrix multiplication to work.
          </p>
        </exercise>

        <p>
          Square matrices can be multiplied by themselves and at times we want to multiply repeatedly, e.g. <m>A^3=A\cdot A \cdot A</m>. 
          In SymPy we can perform repeated matrix multiplication using Python's exponent operator <c>A**3</c>. 
          In NumPy we can call <c>linalg.matrixpower(matrix, integer power).</c>
        </p>

        <exercise>
          <p>
            Compute 
            <m>
              \left[
              \begin{matrix}
              5 \amp 5 \amp 5 \amp 5 \\
              5 \amp 5 \amp 5 \amp 5 \\
              5 \amp 5 \amp 5 \amp 5 \\
              5 \amp 5 \amp 5 \amp 5 \\
              \end{matrix}
              \right]^3 
              
            </m> 
            Note: 
            <m>
              A^3 \neq \left[
              \begin{matrix}
              5^3 \amp 5^3 \amp 5^3 \amp 5^3 \\
              5^3 \amp 5^3 \amp 5^3 \amp 5^3 \\
              5^3 \amp 5^3 \amp 5^3 \amp 5^3 \\
              5^3 \amp 5^3 \amp 5^3 \amp 5^3 \\
              \end{matrix}
              \right]
            </m>
          </p>
        </exercise>

        <sage language='python'>
          <input>
            #

          </input>
        </sage>
        
      </subsection>
      <subsection xml:id="subsec-MatrixInverses">
        <title>Matrix Inverses</title>
        <p>
          Recall that we can find multiplicative matrix inverses by hand by augmenting a matrix with the identity matrix
          and row reducing to the identity. Thus we can find a matrix inverse in SymPy 
          simply by applying <c>rref()</c> to a matrix augmented with the identity matrix, which we can<em>not</em> do with NumPy.
        </p>
        <p>
          Both SymPy and NumPy have a dedicated matrix inverse command, however, 
          NumPy's <c>linalg.inv()</c> and SymPy's <c>inv()</c>.
        </p>

        <sage language='python'>
          <input>
            import numpy as np

            npA = np.array([[2,-3], [1,4]])

            #inverse using numpy
            npA_inverse = np.linalg.inv(npA)

            print(npA_inverse)

          </input>
        </sage>

        <sage language='python'>
          <input>
            import sympy as sp

            spA = sp.Matrix([[2,-3], [1,4]])
            
            #inverse using sympy, two options
            spA_inverse = spA.inv() 
            spA2_inverse = spA**(-1)

            print(spA_inverse, spA2_inverse)

          </input>
        </sage>
      </subsection>

      <subsection xml:id="subsec-ill-conditioned">
        <title>Ill-Conditioned Matrices</title>

        <p>
          While inverting a matrix helps us solve matrix equations symbolically and develop theory,
          in practice, you seldom want to invert a matrix with technology in order to solve systems of linear equations.
          The primary reason being that some matrices are <em>ill-conditioned</em>, that is, 
          small changes in the entries of the matrix can give radical changes in the inverse returned.
          So then any rounding error can output radically different inverses. 
        </p>
        <p>
          For example, consider the two systems
          <!--sidebyside widths="40% 40%" margins="auto" valign="middle"-->
           <md>
             <mrow>x  +y  \amp= 2 </mrow>
             <mrow>x  +1.001y  \amp =2 </mrow>
           </md>

           <md>
            <mrow> x+y \amp= 2</mrow>
            <mrow> x+1.001y \amp= 2.001</mrow>
          </md>
          which obtain vastly different answers given the small change in the target. 
          The corresponding matrix is ill-conditioned and can give different solutions with technology.

         <!--/sidebyside-->
        </p>

        <sage language='python'>
          <input>
            import sympy as sp
            import numpy as np

            #define your sympy matrix
            sA = sp.Matrix([ [1,1], [1,1.001]])
            #invert using sympy 
            sA_inverse = sA.inv()
            print("In sympy A inverse is:", sA_inverse)

            #solve system using sympy inverse

            #define our numpy matrix
            nA = np.array([[1,1], [1,1.001]])
            # or convert from sympy to numpy
            #nA2 = np.array(sA).astype(np.float64)
            #invert using numpy
            nA_inverse = np.linalg.inv(nA)
            print("In numpy A inverse is:", nA_inverse)

            #solve system using numpy inverse

          </input>
        </sage>
        
      </subsection>


      <conclusion>
        <p>

        </p>
      </conclusion>

      <assemblage><!--to assemble or summarize important connected ideas-->
        <title> Summary </title>
        <p>
        <ul>
          <li>
            <p>
              TBD 
            </p>
          </li>
        </ul>
        <ul>
          <li>
            <p>
              TBD
            </p>
          </li>
        </ul>
      </p>
      </assemblage>

      <exercises xml:id="exercises-matrices">
        <exercise>
          <sage language='python'>
            <input>
              #
              #
              #
              #
              #
            </input>
          </sage>
          
        </exercise>
        
      </exercises>



</section>