<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the book                      -->
<!--                                                    -->
<!-- An Introduction to Matrix Computations in Python   -->
<!--                                                    -->
<!-- Copyright (C) 2023  LBCC                           -->
<!-- See the file copyright.txt for copying conditions. -->

<section xml:id="section-variables">

    <title>Variables</title>

    <introduction>
      In this section we will learn how to assign values to a variable in Python and display results. 

    </introduction>

    <objectives>
      <ul>
        <li>
          <p>
            Create a variable in Python using <c>=</c>
          </p>
        </li>
        <li>
          <p>
            Display a variable in Python using <c>print()</c>
          </p>
        </li>
      </ul>
    </objectives>

    <p>
      A <term> variable </term> is like a container that can be used to store information or data. 
      In Python you assign a variable using <c> = </c>. 
    </p>
    <p>           
      Run the Python code below by clicking the <em>Evaluate (Python)</em> button. 
    </p>

    <sage language='python'>
      <input>
        a = 2*3
        print(a)
      </input>
    </sage>

    <p>
      Note that the function <c>print()</c> was needed to display the value of the variable. 
    </p>

    <exercise>
      <p>
        Change the value of the variable <em>a</em> by adding 5 after the 2*3 above and run the code again to see how the output changes.
      </p>
    </exercise>

    <subsection xml:id="subsec-more-variables">
      <title>Naming Variables</title>
      <p>
        Variables can be named using letters, underscores, numbers, etc. 
        Just be sure to use the exact same name to call your variable. 
        For example, the following code has a syntax error. 
      </p>

      <p>Run the code as is and see what happens. </p>
      
      <sage language='python'>
        <input>
          Intro_world = "Hello again, world!"
          print(intro_world)
        </input>
      </sage>
      
      <exercise>
        <statement>
          <p> Can you fix the bug in the above code so it runs correctly? </p>
        </statement>
        <hint>
          <p>
            Variables are case sensitive and must be exactly the same for Python to recognize them.
          </p>
        </hint>
      </exercise>
        
      </subsection>

      <subsection>
        <title>Arithmetic and Comments in Python</title>
        <p>
          Python recognizes simple arithmetic symbols like <c>+ -, *, /</c>.
        </p>
        <p>
          Meanwhile a hashtag <c>#</c> can be used to tell Python to ignore code, 
          reading what follows as a comment by the author rather than a Python command.   
        </p>

        <sage language='python'>
          <input>
            #compute a sum and product 
            sum_and_product = (3+4+5)*2
            print(sum_and_product)
              
            #compute 9 cubed and display the result
            nine_cubed = 9**3 # the symbol for exponentiation is ** 
            print(nine_cubed)
         </input>
        </sage>

        <p>
          Comments can help anyone reading your code understand what that section of the code is doing. 
          You can also <em>comment out</em> portions of code to isolate a bug. 
        </p>
        
        <exercise>
          <statement>
            <p> 
              In the box below, change the value of the variable <c>arithmetic</c> to try out some basic calculations.
              Add a comment using <c>#</c> to explain what your code is doing.    
            </p>
          </statement>
          <hint>
            <p> You can use the standard order of operations and parentheses (PEMDAS).</p>
          </hint>
        </exercise>

        <sage language='python'>
          <input>
            arithmetic = (9+3)/3
            print(arithmetic)
          </input>
        </sage>

      </subsection>

      <subsection>
        <title>More about Variables</title>
        
        <p> Just like in math, variables can be helpful when the information will change. 
          Recall the formula for the area of a circle <m>A=\pi r^2</m>. 
        </p>
        
        <p>In the code below, 
        </p>
          <ul>
            <li>
                <p>
                  fill in the formula for the area of the circle using the appropriate variable names and arithmetic operations.
                </p>
            </li>
          </ul>
          <ul>
            <li>
                <p>
                  Use the code to approximately compute the area of a circle with radius 5 and a circle with radius 13.
                </p>
            </li>
          </ul>  
       
        <sage language='python'>
          <input>
            radius = 4
            pi = 3.14 
            
            #fill in the formula for the calculation here
            circle_area = 

            print(circle_area)
          </input>
        </sage>

      </subsection>

      <subsection>
        <title>Syntax and Semantic errors</title>
      </subsection>

      <p> One error we can make when creating and editing code is to mis-type a command and Python will not understand a word or syntax of our program. 
        Another error is when we make our meaning unclear. For example you can add numbers to numbers or strings of letters to strings of letters in Python but if we try to add a number to a string of letters, Python will not know what we mean by adding. 
      </p>

      <assemblage><!--to assemble or summarize important connected ideas-->
        <title> Summary </title>
        <p>
        <ul>
          <li>
            <p>
              A variable can be used as a container to store data or information. 
            </p>
          </li>
        </ul>
        <ul>
          <li>
            <p>
              Use <c>print(variable_name)</c> to display the information stored in the variable.
            </p>
          </li>
        </ul>
        <ul>
          <li>
            <p>
              Use <c>#</c> to comment and make your code more readable.
            </p>
          </li>
        </ul>
      </p>
      </assemblage>

      <exercises xml:id="exercises-">
        <exercise>
          <p> test it out </p>
        </exercise>
        
      </exercises>



</section>