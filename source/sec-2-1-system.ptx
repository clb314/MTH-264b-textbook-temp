<!-- This file is part of the book                      -->
<!--                                                    -->
<!-- An Introduction to Matrix Computations in Python   -->
<!--                                                    -->
<!-- Copyright (C) 2023  LBCC                           -->
<!-- See the file copyright.txt for copying conditions. -->

<section xml:id="section-systems">
    
    <title>Solving Systems of Linear Equations via Row Reduction</title>

    <introduction>
        Systems of linear equations can be solved using multiple methods. 
        In this section we will learn how to solve systems of linear equations using a process called row reduction.
        <fn>
          Row reduction is sometimes called Gaussian elimination, after the mathematician Gauss. 
          Long before Gauss, Chinese scholars demonstrated this method of solving systems of linear equations in chapter 8 of 
          <emph>The Nine Chapters on the Mathematical Art.</emph>.
        </fn> 
           
    </introduction>

    <objectives>
        <ul>
          <li>
            <p>
              Row reduce matrices representing systems of linear equations using the Python library Sympy.
            </p>
          </li>
          <li>
            <p>
              Graph systems of linear equations of two or three variables.
            </p>
          </li>
          <li>
            <p>
              Use the pivots of a reduced augmented matrix to determine if a system has no solution, 
              a unique solution, or infinitely many solutions
            </p>
          </li>
          <li>
            <p>
              Something about using linalgsolve()? or wait until later?
            </p>
          </li>
        </ul>
      </objectives>

      <subsection xml:id="rref">
        <title>Row Reduction</title>


        <p>
          Note that row reduction involves symbolic manipulation. Since Numpy is focused on number crunching,
          so we will need a different Python library called Sympy to do the symbolic manipulation of 
          row reduction to reduced echelon form and row reduced echelon form using the 
          functions <code>ref()</code> and <code>rref()</code> respectively. 
        </p>
        <p>
          In order to row reduce a system of linear equations we convert our system into an augmented matrix. 
          For example
          <md>
            <mrow>2x \amp -3y \amp= 4 </mrow>
            <mrow>  x \amp +4y \amp =2</mrow>
          </md>
          becomes
          <me>
            \left[
            \begin{matrix}
            2 \amp -3 \amp | \amp 4\\
            1 \amp 4 \amp | \amp 2
            \end{matrix}
            \right].
          </me>
        </p>
        <p>
          In Sympy, matrices are entered using the function <code>Matrix</code>.
        </p>

        <sage language='python'>
          <input>
            from sympy import Matrix

            #define your sympy matrix
            A = Matrix([
              [1,2,3],
              [4,5,6]]) 

            print(A)

          </input>
        </sage>

        <exercise>
          <p>
            Edit the above code to print the augmented matrix for our example system of linear equations. 
          </p>
        </exercise>

        <exercise>
          <p>
            Edit the code below to print the reduced echelon form and the row reduced echelon
            form for the augmented matrix from our example system of linear equations. 
          </p>
        </exercise>

        <sage language='python'>
          <input>
            from sympy import Matrix

            #define your sympy matrix
            A = Matrix([ [2,-3,4], [1,4,2]]) 

            print(A.echelon_form()) #print REF of A
            print(A.rref()) #print RREF of A

          </input>
        </sage>

        <p>
          Note that <code>rref()</code> returns not only the row reduced echelon form of a matrix, but also a 
          tuple that tells you which columns are pivot columns, that is have leading values of 1. 
        </p>

        <exercise>
          <p>
            Edit the code above for various augmented matrices to see how the tuple relates to the pivot columns. 
          </p>
        </exercise>

        <p>
          Things left to do here: (1) something about unique solutions, infinitely many solutions or no solutions, 
          (2) graphing solutions to systems 
        </p>

        <p>
          Since Numpy and Sympy are different libraries, we will need to either enter our augmented matrix 
          as a Sympy matrix, or convert a numpy array into a sympy matrix in order to 
          call the row reducing function in Sympy. 
        </p>


        <sage language='python'>
          <input>
            import numpy as np
            from sympy import Matrix

            npA = np.matrix([[1, 2], [3, 4]]) #Create a numpy matrix
            spA = Matrix(npA) #convert to a sympy matrix
            REF = spA.echelon_form() #Get REF
            RREF = spA.rref()[0] #Get RREF ??why 0?

            print(np.array(RREF))

          </input>
        </sage>
        
      </subsection>

      <assemblage><!--to assemble or summarize important connected ideas-->
        <title> Summary </title>
        <p>
        <ul>
          <li>
            <p>
              blah 
            </p>
          </li>
        </ul>
        <ul>
          <li>
            <p>
                blah
            </p>
          </li>
        </ul>
      </p>
      </assemblage>



</section>