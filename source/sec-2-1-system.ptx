<!-- This file is part of the book                      -->
<!--                                                    -->
<!-- An Introduction to Matrix Computations in Python   -->
<!--                                                    -->
<!-- Copyright (C) 2023  LBCC                           -->
<!-- See the file copyright.txt for copying conditions. -->

<section xml:id="section-systems">
    
    <title>Solving and Graphing Systems of Linear Equations</title>

    <introduction>
        Systems of linear equations can be solved using multiple methods. 
        In this section we will learn how to solve systems of linear equations using a process called row reduction.
        <fn>
          Row reduction is sometimes called Gaussian elimination, after the mathematician Gauss. 
          The method was actually popularized in Europe by Cambridge University who published notes of Newton. 
          Soon algebra textbooks across Europe included the method.  
          Long before Gauss or Newton, Chinese scholars demonstrated this method of solving systems of linear equations in chapter 8 of 
          <emph>The Nine Chapters on the Mathematical Art.</emph>
        </fn> 
           
    </introduction>

    <objectives>
        <ul>
          <li>
            <p>
              Row reduce matrices representing systems of linear equations using the Python library Sympy.
            </p>
          </li>
          <li>
            <p>
              Graph solutions to systems of linear equations of two or three variables.
            </p>
          </li>
          <li>
            <p>
              Graph solutions to vector equations in <m>\mathbb{R}^2</m> and <m>\mathbb{R}^3</m>.
            </p>
          </li>
          <li>
            <p>
              Use the pivots of a reduced augmented matrix to determine if a system has no solution, 
              a unique solution, or infinitely many solutions
            </p>
          </li>
        </ul>
      </objectives>

      <subsection xml:id="rref">
        <title>Row Reduction</title>

        <p>
          Note that row reduction involves symbolic manipulation. Since Numpy is focused on number crunching,
          we will need a different Python library called Sympy to do the symbolic manipulation of 
          row reduction to reduced echelon form and row reduced echelon form. 
        </p>
        <p>
          In order to row reduce a system of linear equations we convert our system into an augmented matrix.  
        </p>
        <example xml:id="augmatrix">
          <title> Augmented Matrix </title>
          <statement>
            <p> For example, the system
              <md>
                <mrow>2x \amp -3y \amp= 4 </mrow>
                <mrow>  x \amp +4y \amp =2</mrow>
              </md>
              becomes
              <me>
                \left[
                \begin{matrix}
                2 \amp -3 \amp | \amp 4\\
                1 \amp 4 \amp | \amp 2
                \end{matrix}
                \right].
              </me> 
            </p>
          </statement>
        </example>
              
        <p>
          In Sympy, matrices are entered using the function <c>Matrix</c>.
        </p>

        <sage language='python'>
          <input>
            import sympy as sp

            #define your sympy matrix
            A = sp.Matrix([
              [1,2,3],
              [4,5,6]]) 

            print(A)

          </input>
        </sage>

        <exercise>
          <p>
            Edit the above code to print the augmented matrix for the system of linear equations in <xref ref="augmatrix"/>. 
          </p>
        </exercise>


        <p>
          Note that sympy will automatically convert decimals to floating point numbers. 
          Often it is helpful to keep fractions exact using sympy's <c>Rational(a,b)</c> command.
        </p>

        <exercise>
          <p>
            Edit the above code to print a matrix with decimals like <m>0.9</m> or <m>0.1</m>. 
            Also print a matrix with fractions like <m>\frac{9}{10}</m> and <m>\frac{1}{10}</m> using sympy's <c>Rational(a,b)</c> command. 
          </p>
          <hint>
            <p>
              Note that <c>Rational(a,b)</c> is not a Python command, but rather a command specific to Sympy.
            </p>
          </hint>
        </exercise>


        <p>
          The Sympy functions <c>echelon_form()</c> and <c>rref()</c> can be used to row reduce 
          a matrix to reduced echelon form and row reduced echelon form, respectively. 
          If you need a refresher on these two forms, read 
          <url href="https://textbooks.math.gatech.edu/ila/row-reduction.html" visual="Interactive Linear Algebra 1.2 Row Reduction">Section 1.2</url> of Interactive Linear Algebra.
        </p>

        <exercise>
          <p>
            Edit the code below to print the reduced echelon form and the row reduced echelon
            form for the augmented matrix of the system of linear equations from <xref ref="augmatrix"/>. 
          </p>
        </exercise>

        <sage language='python'>
          <input>
            import sympy as sp

            #define your sympy matrix
            A = sp.Matrix([ [2,-3,4], [1,4,2]]) 

            print(A.echelon_form()) #print REF of A
            print(A.rref()) #print RREF of A

          </input>
        </sage>

        <p>
          Note that <c>rref()</c> returns not only the row reduced echelon form of a matrix, but also a 
          tuple that tells you which columns have leading values of 1. These columns are called <emph>pivot columns</emph>, 
          and give you a quick way to see any free variables (which are non-pivot columns).
        </p>

        <exercise>
          <p>
            Edit the code above for various augmented matrices to see how the tuple returned by <c>rref()</c> relates to the pivot columns. 
          </p>
        </exercise>

        <p>
          Recall that a system of linear equations either has 
          <ol>
            <li>
              <p>
                no solution,
              </p>
            </li>
            <li>
              <p>
                a unique solution, or
              </p>
            </li>
            <li>
              <p>
                infinitely many solutions.
              </p>
            </li>
          </ol>
          If you need a refresher on how to interpret the reduced echelon form of an augmented matrix to determine if there is no solution, 
          write down the unique solution, or give the infinitely many solutions in parametric form, 
          see section (insert section here).
        </p>
      </subsection>

      <subsection xml:id="graphsolution">
        <title>Graphing solutions to systems of equations</title>

        <p>
          In order to graph solutions to systems of linear equations with two or three variables you can graph the corresponding lines, planes, or coordinates. 
        </p>

        <example xml:id="twodsolutions">
          <p> The system
            <md>
              <mrow>x \amp +2y \amp= 6 </mrow>
              <mrow>  \frac{1}{2}x \amp -y \amp =1</mrow>
            </md>
            has solutions <m>x=4</m> and <m>y=1</m>. 
          </p>
          <p> Linear equations with two variables can be graphed as lines in the xy-plane, 
            either by plotting two points on the line or solving for <m>y</m>. 
            The solution is one point in a scatter plot. 
          </p>
          <sage language='python'>
            <input>
              import matplotlib.pyplot as plt
              import numpy as np

              fig = plt.figure() #create a figure
              ax = plt.axes() #create an axis
              ax.grid() #add a grid

              X = np.linspace(0,10,num=100) #inputs
              Y1 = (6-X)/2 #outputs for first equation
              Y2 = 0.5*X-1 #outputs for second equation

              #label title and axes
              ax.set(title="Solutions to 2D System", xlabel="x", ylabel="y") 

              ax.plot(X,Y1,X,Y2) #plot both equations
              plt.show() #display result
            </input>
          </sage>
          
        </example>

        <exercise>
          <p>
            Edit the code in <xref ref="twodsolutions"/> to clearly indicate the solution <m>x=4</m> and <m>y=1</m> on the graph.
          </p>
        </exercise>

        <p>
          Systems of equations with three variables must be graphed in 3D. 
          As mentioned in <xref ref="section-matplotlib3d"/>, Matplotlib paints 2D projections of each surface on top 
          of the other which doesn't adequately graph their relationships. 
          We can partially fix this by making the surfaces transparent and explicitly plotting their intersections. 
          The intersection of any two non-parallel planes is a line which can be found
          by solving the system of the two plane equations and writing the solution in parametric form. 
        </p>

        <example xml:id="threedsolutions1">
          <p> Graph solutions to the system
            <md>
              <mrow>x +y +z \amp= 1 </mrow>
              <mrow> -y +z \amp =1</mrow>
              <mrow>-x  +y -z\amp =0</mrow>
            </md>
            by finding the equations of the lines of intersection of the planes and plotting the planes, the lines, and the point of intersection.
          </p>
          <p>
            Solution 1 walks through the process, followed by a Python implementation of the <c>rref()</c>. 
          </p>
          <solution>
            <p>
              First row reducing the augmented matrix for the system of all three equations we obtain
              a unique solution <m>x=-1</m>, <m>y=1/2</m>, <m>z=3/2</m>. 
            </p>
            <p>
              Row reducing the augmented matrix for the first two equations we obtain
              <md>
                <mrow>x +2z \amp= 2 </mrow>
                <mrow> y -z \amp =-1</mrow>
              </md>
              which can be written in parametric form,
              <me>
                \left[ \begin{matrix} x\\ y\\z \end{matrix} \right] =
                \left[\begin{matrix} 2-2z\\ -1+z\\z \end{matrix} \right]=
                \left[\begin{matrix} 2\\ -1\\0 \end{matrix} \right] +z\left[\begin{matrix} -2\\ 1\\1 \end{matrix} \right].
              </me> 
            </p>
            <p>
              Row reducing the augmented matrix for the last two equations we obtain
              <md>
                <mrow>x \amp= -1 </mrow>
                <mrow> y -z \amp =-1</mrow>
              </md>
              which can be written in parametric form,
              <me>
                \left[ \begin{matrix} x\\ y\\z \end{matrix} \right] =
                \left[\begin{matrix} -1\\ -1+z\\z \end{matrix} \right]=
                \left[\begin{matrix} -1\\ -1\\0 \end{matrix} \right] +z\left[\begin{matrix} 0\\ 1\\1 \end{matrix} \right].
              </me> 
            </p>
            <p>
              Row reducing the augmented matrix for the first and last equations we obtain
              <md>
                <mrow>x +z\amp= 1/2 </mrow>
                <mrow> y  \amp =1/2</mrow>
              </md>
              which can be written in parametric form,
              <me>
                \left[ \begin{matrix} x\\ y\\z \end{matrix} \right] =
                \left[\begin{matrix} 1/2-z\\ 1/2\\z \end{matrix} \right]=
                \left[\begin{matrix} 1/2\\ 1/2\\0 \end{matrix} \right] +z\left[\begin{matrix} -1\\ 0\\1 \end{matrix} \right].
              </me> 
            </p>
          </solution>
          <sage language='python'>
            <input>
              import sympy as sp

              A = sp.Matrix([ [1,1,1,1], [0,-1,1,1],[-1,1,-1,0]
              ]) #all three equations

              I1 = sp.Matrix([ [1,1,1,1], [0,-1,1,1]
              ]) #intersection first two equations

              I2 = sp.Matrix([ [0,-1,1,1],[-1,1,-1,0]
              ]) #intersection last two other equations

              I3 = sp.Matrix([ [1,1,1,1], [-1,1,-1,0]
              ]) #intersection first and last equations

              print("A=", A.rref())
              print("I1=", I1.rref())
              print("I2=", I2.rref())
              print("I3=", I3.rref())
            </input>
          </sage>
          <p>
            Next we will use Matplotlib to graph these results. 
            First note that if we are careless with our input domains for the planes and lines, our graph will be inconsistent. 
            
          </p>

          <sage language='python'>
            <input>
              import matplotlib.pyplot as plt
              import numpy as np

              fig = plt.figure() #create a figure
              ax = plt.axes(projection='3d') #add a 3D axis

              #plot the 3 plane equations, use alpha for transparency
              X = np.arange(-2,2,step=0.25) #1d x inputs
              Y = np.arange(-2,2,step=0.25) #1d y inputs
              X,Y = np.meshgrid(X,Y) #2D grid of inputs
              Z1 = 1-X-Y
              Z2 = 1+Y
              Z3 = Y-X
              ax.plot_surface(X,Y,Z1, alpha=0.5) 
              ax.plot_surface(X,Y,Z2, alpha=0.5)
              ax.plot_surface(X,Y,Z3, alpha=0.5)

              #plot the solution
              ax.scatter(-1,1/2,3/2)

              #plot the 3 line equations
              Z = np.arange(-2,2,step=0.25)
              X1 = 2-2*Z
              Y1 = -1+Z
              X2 = -1+0*Z
              Y2 = -1+Z
              X3 = 0.5-Z
              Y3 = 0.5+0*Z
              ax.plot(X1,Y1,Z)
              ax.plot(X2,Y2,Z)
              ax.plot(X3,Y3,Z)

              # Customize the view angle 
              #ax.view_init(elev=20, azim=30, roll=0)

              #set title and axes labels
              ax.set(title="Solutions to 3D System", xlabel="x", ylabel="y", zlabel="z")
              
              plt.show()
            </input>
          </sage>
          <p>Note: you can change the viewing angle to try and get a better graph.</p>
          <p>
            The real problem in the code above is that we graph our surfaces with domain <m>-2\leq x \leq 2</m> and <m>-2\leq y\leq 2</m>, 
            but use <m>-2\leq z\leq 2</m> for the parametric equation of our lines. There are several fixes for this. 
          </p>
          <p>
            One fix is to adjust the parametric input values for the lines to better match the planes. 
            For example, you can make <m>-1\leq z \leq 3</m> to get a more consistent graph. 
            <em>Try several adjustments for the <m>z</m> range in the above code.</em>
            To get a fully consistent graph, each line would need a different parametric domain that matches the domain of the planes. 
          </p>
          <p>   
            Another fix is to solve each pair of equations for two points on the line in the domain of the planes.  
            You can then plot the line between the two points.  
          </p>
          <p>
            Solution 2 walks through the process of finding the points, followed by an alternative Python implementation to graph the solutions.
          </p>
          <solution>
            <p>
              Recall the first two equations intersect in the line 
              <me>
                \left[ \begin{matrix} x\\ y\\z \end{matrix} \right] =
                \left[\begin{matrix} 2-2z\\ -1+z\\z \end{matrix} \right]=
                \left[\begin{matrix} 2\\ -1\\0 \end{matrix} \right] +z\left[\begin{matrix} -2\\ 1\\1 \end{matrix} \right].
              </me> 
              Solving for when <m>x=2</m>, we see <m>t=0</m>. 
              Plugging <m>t=0</m> into the parametric equation for the line we obtain the point <m>(2,-1,0)</m>.
              Similarly when <m>x=-2</m>, we find <m>t=2</m>, giving the point <m>(-2,1,2)</m>.
            </p>
            <p>
              The last two equations intersect in the line
              <me>
                \left[ \begin{matrix} x\\ y\\z \end{matrix} \right] =
                \left[\begin{matrix} -1\\ -1+z\\z \end{matrix} \right]=
                \left[\begin{matrix} -1\\ -1\\0 \end{matrix} \right] +z\left[\begin{matrix} 0\\ 1\\1 \end{matrix} \right].
              </me> 
              Here <m>x</m> is always <m>-1</m>. Instead we solve for when <m>y=-2</m> and <m>2</m>.
              We find <m>t=-1</m> and <m>3</m>, giving us the two points <m>(-1,2,-1)</m> and <m>(-1,2,3)</m>.
            </p>
            <p>
              The first and last equations intersect in the line
              <me>
                \left[ \begin{matrix} x\\ y\\z \end{matrix} \right] =
                \left[\begin{matrix} 1/2-z\\ 1/2\\z \end{matrix} \right]=
                \left[\begin{matrix} 1/2\\ 1/2\\0 \end{matrix} \right] +z\left[\begin{matrix} -1\\ 0\\1 \end{matrix} \right].
              </me> 
              Here <m>x=-2,2</m> when <m>t=5/2,-3/2</m> giving us the points <m>(-2,1/2,5/2)</m> and <m>(2,1/2,-3/2)</m>.
            </p>
            <p>
              Recall to plot the lines between two points we create arrays of the <m>x</m>-values, <m>y</m>-values, and <m>z</m>-values, 
              then plot the line between them. 
            </p>
          </solution>

          <sage language='python'>
            <input>
              import matplotlib.pyplot as plt
              import numpy as np

              fig = plt.figure() #create a figure
              ax = plt.axes(projection='3d') #add a 3D axis

              #plot the 3 plane equations, use alpha for transparency
              X = np.arange(-2,2,step=0.25) #1d x inputs
              Y = np.arange(-2,2,step=0.25) #1d y inputs
              X,Y = np.meshgrid(X,Y) #2D grid of inputs
              SurfZ1 = 1-X-Y
              SurfZ2 = 1+Y
              SurfZ3 = Y-X
              ax.plot_surface(X,Y,SurfZ1, color='cyan', alpha=0.5) 
              ax.plot_surface(X,Y,SurfZ2, color='orchid', alpha=0.5)
              ax.plot_surface(X,Y,SurfZ3, color='gold', alpha=0.5)

              #plot the solution
              ax.scatter(-1,1/2,3/2)

              #plot the 3 line equations using points
              Line1X = [-2,2] #xvalues for first line
              Line1Y = [1,-1] #yvalues for first line
              Line1Z = [2,0] #zvalues for first line
              Line2X = [-1,-1]
              Line2Y = [-2,2]
              Line2Z = [-1,3]
              Line3X = [-2,2]
              Line3Y = [1/2,1/2]
              Line3Z = [5/2,-3/2]
              ax.plot(Line1X,Line1Y,Line1Z, color='mediumpurple')
              ax.plot(Line2X,Line2Y,Line2Z, color='darkorange')
              ax.plot(Line3X,Line3Y,Line3Z, color='green')

              # Customize the view angle 
              #ax.view_init(elev=20, azim=30, roll=0)

              set title and axes labels
              ax.set(title="Solutions to 3D System", xlabel="x", ylabel="y", zlabel="z")
              
              plt.show()
            </input>
          </sage>

          <p>
            Can you find other fixes? <em>If so, share them so we can add them here.</em> 
          </p>
        </example>


      </subsection>

      <subsection>
        <title> Graphing vector equations and their solutions </title>
        <p>
          Recall that solving a vector equation is equivalent to solving a system of equations.
        </p>
        <example>
          <p>
            For example the vector equation

            <me>
              x\left[ \begin{matrix} 1\\ 1/2 \end{matrix} \right] +
              y\left[\begin{matrix} 2\\-1 \end{matrix} \right]=
              \left[\begin{matrix} 6\\1 \end{matrix} \right]
            </me> 
            corresponds to the linear system found in <xref ref="twodsolutions"/>
            and still has solution <m>x=4</m> and <m>y=1</m>. 
          </p>
          <p>
            The solution to the vector equation can be graphed using linear combinations of vectors. 
            That is, <m>4\vec{u}+\vec{v}=\vec{b}.</m>
          </p>

          <sage language='python'>
            <input>
              import matplotlib.pyplot as plt
              
              fig = plt.figure(figsize=(8,5)) #create a figure
              #create one row and two columns of plots
              ax1 = plt.subplot(1,2,1) #1 row, 2 columns, first graph
              ax2 = plt.subplot(1,2,2) #1 row, 2 columns, second graph
              
              # add original vectors to axes
              ax1.quiver(0,0,1,1/2,label='$\\vec u$',color='darkgoldenrod', angles='xy', scale_units='xy', scale=1) 
              ax1.quiver(0,0,2,-1,label='$\\vec v$',color='deepskyblue', angles='xy', scale_units='xy', scale=1) 
              ax1.quiver(0,0,6,1,label='$\\vec b$',color='green', angles='xy', scale_units='xy', scale=1) 
              
              #add solution vectors to axes
              ax2.quiver(0,0,4,2,label='$4 \\vec u$',color='darkgoldenrod', angles='xy', scale_units='xy', scale=1, alpha=0.6) 
              ax2.quiver(4,2,2,-1,label='$\\vec v$', color='deepskyblue', angles='xy', scale_units='xy', scale=1)
              ax2.quiver(0,0,6,1,label='$\\vec b$',color='green', angles='xy', scale_units='xy', scale=1) 
              
              #annotate vectors option instead of legend
              ax1.annotate("$\\vec u$", xy=(0.25,0.25))
              ax1.annotate("$\\vec v$", xy=(0.5, -.65))
              ax1.annotate("$\\vec b$", xy=(3, 0.25))
              ax2.annotate("$4\\vec u$", xy=(2,1.2))
              ax2.annotate("$\\vec v$", xy=(5,1.65))
              ax2.annotate("$\\vec b$", xy=(3, 0.25))

              #set title and axes labels and limits, legend, axis, grid
              ax1.set(title="Vector Equation $x\\vec u+y\\vec v=\\vec b$")
              ax1.set(xlabel="x", ylabel="y")
              ax1.set(xlim=(-1,7), ylim=(-1.5,3.5))
              ax1.legend() 
              ax1.axhline(0, color='black')
              ax1.axvline(0, color='black')
              ax1.grid()
              
              #set title and axes labels and limits, legend, axis, grid
              ax2.set(title="Vector Equation Solutions", xlabel="x", ylabel="y")
              ax2.set(xlim=(-1,7), ylim=(-1.5,3.5))
              ax2.legend() 
              ax2.axhline(0, color='black')
              ax2.axvline(0, color='black')
              ax2.grid() 
              
              plt.show()
            </input>
          </sage>
        </example>
      </subsection>

      <subsection xml:id="subsec-">
        <title>Converting between Numpy arrays and Sympy Matrices</title>

      <p>
        Since Numpy and Sympy are different libraries, we will need to either enter our augmented matrix 
        as a Sympy matrix, or convert a numpy array into a sympy matrix in order to 
        call the row reducing function in Sympy. 
      </p>

      <p>
        Note that Numpy matrices can be coded as 2D Numpy arrays.
      </p>


      <sage language='python'>
        <input>
          import numpy as np
          import sympy as sp

          npA = np.matrix([[1, 2], [3, 4]]) #Create a numpy matrix
          spA = sp.Matrix(npA) #convert to a sympy matrix

          RREF = spA.rref()[0] #Get RREF in sympy
          
          print(RREF) #print sympy rref
          print(np.array(RREF)) #print numpy rref, this doesn't always work to compute with
          print(np.array(RREF).astype(np.float64)) #specify float type, which will work

        </input>
      </sage>
      
    </subsection>
    <subsection xml:id="subsecRoundingErrorRref">
      <title>Round-off error in Sympy's rref()</title>
      <p>
        Whenever you use a computer to perform arithmetic
        you have to consider round-off error.
        Numbers in Python are either stored as an integer data type, a floating point number data type,
        or a complex number data type. 
        Although <m>0.1</m> has a finite decimal representation, in binary it requires an infinite 
        repeating floating point representation which cannot be stored without being truncated or rounded. 
      </p>

      <example xml:id="rounderror">
        <p>
          Consider the system of equations
                <md>
                  <mrow>0.8x -0.8y -0.4z \amp= 0 </mrow>
                  <mrow> -0.3x +0.9y -0.4z \amp =0</mrow>
                  <mrow> -0.4x -0.1y +0.8z\amp=0 </mrow>
                </md>
          
          If you multiply both sides of each equation by 10, 
          you don't change the solutions to the equations. 
                <md>
                  <mrow>8x -8y -4z \amp= 0 </mrow>
                  <mrow> -3x +9y -4z \amp =0</mrow>
                  <mrow> -4x -y +8z\amp=0 </mrow>
                </md>
          If you use Sympy to row reduce the system, however, you get a different answer.
        </p>

        <sage language='python'>
          <input>
            import sympy as sp
            
            #system of linear equations
            S = sp.Matrix([
            [ 0.8,-0.8,-0.4 ,0],
            [-0.3, 0.9,-0.4, 0],
            [-0.5,-0.1, 0.8, 0]])
            
            #same system multiplied by 10
            disguised_S = sp.Matrix([
            [ 8,-8,-4 ,0],
            [-3, 9,-4, 0],
            [-5,-1, 8, 0]])
            
            print("Reduced with decimals:", S.rref())
            print("Reduced with whole numbers:", disguised_S.rref()) 
          </input>
        </sage>
        A possible fix for the floating point round-off error is to tell
        Sympy explicitly when to round to zero by making a user defined <c>iszerofunc</c>.

        <sage language='python'>
          <input>
            import sympy as sp
            
            #system of linear equations
            S = sp.Matrix([
            [ 0.8,-0.8,-0.4 ,0],
            [-0.3, 0.9,-0.4, 0],
            [-0.5,-0.1, 0.8, 0]])
            
            #same system multiplied by 10
            disguised_S = sp.Matrix([
            [ 8,-8,-4 ,0],
            [-3, 9,-4, 0],
            [-5,-1, 8, 0]])

            SRREF = S.rref(iszerofunc=lambda x: abs(x) &lt; 1e-10)
            
            print("Reduced with decimals:", SRREF)
            print("Reduced with whole numbers:", disguised_S.rref()) 
          </input>
        </sage>


      </example>

      <exercise>
        <p>
          Sympy's rational number data type stores fractions as two integers to avoid floating point representation. 
          Fix the row reduction round-off error
          for the original system in <xref ref="rounderror"/> by using Sympy's
          <c>Rational()</c> function instead.
        </p> 
      </exercise>


      


    </subsection>

      <assemblage><!--to assemble or summarize important connected ideas-->
        <title> Summary </title>
        <p>
        <ul>
          <li>
            <p>
              TBD 
            </p>
          </li>
        </ul>
        <ul>
          <li>
            <p>
                TBD
            </p>
          </li>
        </ul>
      </p>
      </assemblage>

      <exercises xml:id="exercises-systems">
        <exercise>
          <p> The system
            <md>
              <mrow>x  +2y  +z \amp= 6 </mrow>
              <mrow>x  -y  \amp =3</mrow>
              <mrow>-x  +y  -z\amp =0</mrow>
            </md>
            has a unique solution.  
          </p>
          <p>
            Use Python code to find the solution. 
            Graph the system of equations and the solution using Matplot3D. Lable your axes. 
            <em>Note: part of the challenge is making sure you have a good viewing window and perspective
              so the graph helps illuminate the solution.
            </em>
          </p>
        </exercise>

        <exercise>
          <p>
            Consider the system
            <md>
              <mrow>x  +2y  +z \amp= 6 </mrow>
              <mrow>x  -y  \amp =3</mrow>
              <mrow>-x  +y  -z\amp =0</mrow>
            </md>
            Convert the system of linear equations to a vector equation. 
          </p>
          <p>
            Find the unique solution and graph your answer as a vector equation using Matplotlib3D.
            (That is, use vectors instead of planes to visualize the solution to this system.)
          </p>
        </exercise>
        
      </exercises>



</section>