<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the book                      -->
<!--                                                    -->
<!-- An Introduction to Matrix Computations in Python   -->
<!--                                                    -->
<!-- Copyright (C) 2023  LBCC                           -->
<!-- See the file copyright.txt for copying conditions. -->

<section xml:id="section-matplotlib">
  
  <title>Matplotlib and 2D graphing</title>

  <introduction>
    Matplotlib is a Python library that uses NumPy arrays (<xref ref="section-modules"/>) to create static or interactive graphs and data visualizations. 
    In this section we will learn how to use the MatPlotLib to graph curves and plot points in 2D.  
  </introduction>

  <objectives>
    <ul>
      <li>
        <p>
          Use Matplotlib to graph curves.
        </p>
      </li>
      <li>
        <p>
          Use Matplotlib to make a scatterplot.
        </p>
      </li>
      <li>
        <p>
          Label the axes on a graph.
        </p>
      </li>
    </ul>
  </objectives>

  <subsection>
    <title> Curves in 2D </title>

    <p>
      Matplotlib graphs curves by plotting points and connecting the dots.
      A Matplotlib function called <c>pyplot</c> is used to create the figure and axes. 
      The inputs and outputs are given by NumPy arrays and then plotted on the axes.
      Run both sets of code below that uses matplotlib to graph a line and a sine curve.     
    </p>

    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add an axis
        X=np.array([0,3,6]) #determine inputs
        Y=2*X #determine outputs for y=2x

        ax.plot(X,Y) #plot the connected dots on your axes
        plt.show() #display the result
      </input>
    </sage>


    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add an axis
        X=np.linspace(0,6,num=100) #determine inputs
        Y=np.sin(X) #determine outputs for y=sin(x)
        
        ax.plot(X,Y) #plot the connected dots on your axes
        plt.show() #display the result
      </input>
    </sage>

    <p>
      Note when `connecting the dots' you need enough points to get a smooth curve. 
    </p>
    <exercise>
      <p>Change the above code to whole number inputs from 0 to 6. 
        <ul>
          <li>
            <p>
              What happens to your line?
            </p>
          </li> 
          <li>
            <p>
              What happens to your sine curve?
            </p>
          </li>
        </ul>  
      </p>
    </exercise>

    <exercise>
      <p>
        Change the above code to use <c>arange()</c> instead of <c>linspace()</c> to set up your inputs. 
        What is the smallest step size that makes the curve look smooth? 
      </p>
    </exercise>

    <exercise>
      <p>Change the above code to graph <m> y=x^2 </m> with a traditional input window like [-10,10]. 
      </p>
    </exercise>


    <p>
      You can plot more than one graph in the same figure using the same inputs but more than one set of outputs. 
      Run the code below to graph <m> y_1 = \sin(x) </m> and <m>y_2=\cos(x)</m> on the same graph. 
    </p>

    <sage language='python'>
      <input>
          import matplotlib.pyplot as plt #import pyplot
          import numpy as np 
          
          fig = plt.figure() #create a figure
          ax = plt.axes() #add an axis
          X=np.linspace(0,6,num=100) #determine inputs
          Y1=np.sin(X) #determine outputs for y=sin(x)
          Y2=np.cos(X) #determine outputs for y=cos(x)
          
          ax.plot(X,Y1,X,Y2) #Note: list inputs for both
          plt.show() #display the result
      </input>
    </sage>

    <exercise>
      <p> Notice that if you don't specify the inputs, pyplot uses a default set instead.
        Change the above code and remove the second call for the inputs X in ax.plot(). 
        What is the default input window pyplot uses for Y2?  
      </p>
    </exercise>

    <exercise>
      <p>Change the above code to add a third function on the same graph.  
      </p>
    </exercise>

  </subsection>

  <subsection xml:id="subsec-scatterplots">
    <title>Scatter Plots in 2D</title>
    <p>
      To graph a scatterplot, use the command <c>scatter</c> instead of <c>plot</c>. 
    </p>

    <exercise>
      <p>Adjust the code in any plot above to make it into a scatter plot instead.   
      </p>
      <hint>
        <p>
          Replace <c>ax.plot()</c> with <c>ax.scatter()</c> in the code. 
        </p>
      </hint>
    </exercise> 

    <p> For scatter plots sometimes you get the data from an experiment instead of a formula.
      Either way the outputs are given as a NumPy array.
    </p>

    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add an axis
        X=np.array([1,2,3,4]) #determine inputs
        Y=np.array([4,2,0,1]) #determine outputs 
        
        ax.scatter(X,Y) #plot the scatter plot on your axes
        plt.show() #display the result
      </input>
    </sage> 

  </subsection>
  
  <subsection xml:id="axes">
    <title>Axes and Labels</title>

    <p>
      You can easily add titles or labels to your axes using the commands <c>set_title("title_here")</c>, 
      <c>set_xlabel("label_here")</c>, <c>set_ylabel("label_here")</c>. 
      Since the code below is longer, you might need to scroll to see all of the commands. 
    </p>

    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #axis name used for plots and labels

        X=np.linspace(0,4,num=100) #determine inputs
        Y=-9.8*X**2+100 #determine outputs for y=-9.8x^2+3
        
        ax.set_title("Falling Body") #title
        ax.set_xlabel("Time (s)") #input label
        ax.set_ylabel("Height (m)") #output label

        ax.plot(X,Y) #Plot the connected dots
        plt.show() #display the result
      </input>
    </sage>

    <p>
      You can also adjust the tick marks on the axes, but it takes a little more work,
      and there are multiple approaches. 
    </p>

    <exercise>
      <p>Search online for a way to change the tick labels in Matplotlib. 
        Try and adjust the "Falling Body" graph to have tickmarks every quarter of a second.  
      </p>
    </exercise>    


  </subsection>



  <subsection xml:id="custom-graphs">
    <title>Customizing</title>

    <p>
      You can customize pretty much everything in the plot: colors, markers, line width and styles, etc.
      Below are a few examples.   
    </p>

    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add an axis
        X=np.array([1,2,3,4]) #determine inputs
        Y=np.array([4,2,0,1]) #determine outputs 
        
        ax.scatter(X,Y, marker="x") #scatterplot with x
        plt.show() #display the result
      </input>
    </sage> 
    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add an axis
        X=np.linspace(0,6,num=100) #determine inputs
        Y=np.sin(X) #determine outputs for y=sin(x)
        
        ax.plot(X,Y, color="orange", linestyle="--") #plot the connected dots on your axes
        plt.show() #display the result
      </input>
    </sage>

    <p>
      The comma separated list of possible commands inside the parentheses of a function like <c>plot()</c>
      are called the <em>arguments</em> of the function. The functions <c>plot</c> and <c>scatter</c>
      can take arguments like <c>color="color_here"</c>, <c>linestyle="style_here"</c>, <c>linewidth=number_here</c>,
      <c>marker="markertype_here"</c>. 
    </p>
    
  </subsection>

  <conclusion>
    <p>There are other ways to set up your figure and your axes in Matplotlib. 
      Some are shortcuts and Matplotlib will use default settings. 
      (For example, if you did not explicitly give inputs for the function you wanted to graph.) 
      The approach in this section is very explicit, which makes it easier to understand how to control each feature as you get started.  
    </p>
  </conclusion>

  <assemblage><!--to assemble or summarize important connected ideas-->
    <title> Summary </title>
    <p>
      <ul>
        <li>
          <p>
            Every graph needs a figure and an axes. 
          </p>
        </li>
        <li>
          <p>
              You graph a connected curve on your axes using <c>axes_name.plot(input array,output array)</c>. 
          </p>
        </li>
        <li>
          <p>
              You graph a scatterplot on your axes using <c>axes_name.scatter(input array,output array)</c>. 
          </p>
        </li>
        <li>
          <p>
              You can use <c>numpy.linspace()</c> to efficiently create enough points for 
              <c>plot()</c> to connect the dots into a smooth-looking curve. 
          </p>
        </li>
        <li>
          <p>
            You can add titles and labels using <c>axes_name.set_title("Title")</c> or <c>axes_name.set_xlabel("input_label")</c>.
          </p>
        </li>
        <li>
          <p>
            You can customize color, linestyles, plotting styles, thickness, tickmarks, font sizes, etc.
            to make your graph exactly what you need for publication. 
          </p>
        </li>
      </ul>
    </p>
  </assemblage>

</section>