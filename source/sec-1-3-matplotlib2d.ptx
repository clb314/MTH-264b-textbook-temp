<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the book                      -->
<!--                                                    -->
<!-- An Introduction to Matrix Computations in Python   -->
<!--                                                    -->
<!-- Copyright (C) 2023  LBCC                           -->
<!-- See the file copyright.txt for copying conditions. -->

<section xml:id="section-matplotlib">
  
  <title>Matplotlib and 2D graphing</title>

  <introduction>
    Matplotlib is a Python library that uses NumPy arrays (<xref ref="section-modules"/>) to create static or interactive graphs and data visualizations. 
    In this section we will learn how to use the MatPlotLib to graph curves and plot points in 2D.  
  </introduction>

  <objectives>
    <ul>
      <li>
        <p>
          Use Matplotlib to graph curves.
        </p>
      </li>
      <li>
        <p>
          Use Matplotlib to make a scatterplot.
        </p>
      </li>
      <li>
        <p>
          Use Matplotlib to graph vectors. 
        </p>
      </li>
      <li>
        <p>
          Label the axes on a graph.
        </p>
      </li>
    </ul>
  </objectives>

  <subsection>
    <title> Curves in 2D </title>

    <p>
      Matplotlib graphs curves by plotting points and connecting the dots.
      A Matplotlib function called <c>pyplot</c> is used to create the figure and individual graphs. 
      The inputs and outputs are given by NumPy arrays and then plotted on the axes.
    </p>
    <!--p-->
    <!--  Note that graphing uses matplotlibs function pyplot and the main steps are:-->
      <!--ol-->
        <!--<li>create a figure and add individual graphs,</li>-->
        <!-- <li>determine an input array, </li>-->
        <!--<li>determine an output array, </li>-->
        <!--<li>plot those inputs and outputs (which pyplot connects piecewise into a curve), and</li>-->
        <!--<li>display the result. </li>-->
      <!--/ol-->

    <!--/p-->

    <p> 
      Read through both sets of code below that uses matplotlib to graph a line and a sine curve to see the syntax for these steps.
      <em> Do you see the difference in how the numpy arrays were created for the inputs and outputs?  </em>
      Run both sets of code to see the result.      
    </p>

    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add a graph or plot, just axes unless more info) 
        X = np.array([0,3,6]) #determine inputs
        Y = 2*X #determine outputs for y=2x

        ax.plot(X,Y) #plot the connected dots on your graph
        plt.show() #display the result
      </input>
    </sage>


    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add a graph or plot
        X = np.linspace(0,6,num=100) #determine inputs
        Y = np.sin(X) #determine outputs for y=sin(x)
        
        ax.plot(X,Y) #plot the connected dots on your graph
        plt.show() #display the result
      </input>
    </sage>

    <p>
      Note when `connecting the dots' you need enough points to get a smooth curve. 
    </p>
    <exercise>
      <p>Change both of the above sets of code to whole number inputs from 0 to 6. 
        <ul>
          <li>
            <p>
              What happens to your line?
            </p>
          </li> 
          <li>
            <p>
              What happens to your sine curve?
            </p>
          </li>
        </ul>  
      </p>
    </exercise>

    <exercise>
      <p>
        Change the above code to use <c>arange()</c> instead of <c>linspace()</c> to set up your inputs. 
        What is the smallest step size that makes the curve look smooth? 
      </p>
    </exercise>

    <exercise>
      <p>Change the above code to graph <m> y=x^2 </m> with a traditional input window like [-10,10]. 
      </p>
    </exercise>


    <p>
      You can plot more than one curve in the same figure using the same inputs but more than one set of outputs. 
      Run the code below to graph <m> y_1 = \sin(x) </m> and <m>y_2=\cos(x)</m> on the same graph. 
    </p>

    <sage language='python'>
      <input>
          import matplotlib.pyplot as plt #import pyplot
          import numpy as np 
          
          fig = plt.figure() #create a figure
          ax = plt.axes() #add a graph
          X = np.linspace(0,6,num=100) #determine inputs
          Y1 = np.sin(X) #determine outputs for y=sin(x)
          Y2 = np.cos(X) #determine outputs for y=cos(x)
          
          ax.plot(X,Y1,X,Y2) #Note: list inputs for both
          plt.show() #display the result
      </input>
    </sage>

    <exercise>
      <p> Notice that if you don't specify the inputs, pyplot uses a default set instead.
        Change the above code and remove the second call for the inputs X in graph.plot(). 
        What is the default input window pyplot uses for Y2?  
      </p>
    </exercise>

    <exercise>
      <p>Change the above code to add a third function on the same graph.  
      </p>
    </exercise>


  </subsection>


  <subsection xml:id="subsec-scatterplots">
    <title>Scatter Plots in 2D</title>
    <p>
      To graph a scatterplot, use the command <c>scatter</c> instead of <c>plot</c>. 
    </p>

    <exercise>
      <p>Adjust the code in any plot above to make it into a scatter plot instead.   
      </p>
      <hint>
        <p>
          Replace <c>ax.plot()</c> with <c>ax.scatter()</c> in the code. 
        </p>
      </hint>
    </exercise> 

    <p> For scatter plots sometimes you get the data from an experiment instead of a formula.
      As long as the outputs are given as a NumPy array, 
      either from manipulating your input array, or by creating a completely new array, 
      Matplotlib will still connect the dots. 
    </p>

    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add a graph
        X = np.array([1,2,3,4]) #determine inputs
        Y = np.array([4,2,0,1]) #determine outputs 
        
        ax.scatter(X,Y) #plot the scatter plot on your graph
        plt.show() #display the result
      </input>
    </sage> 

  </subsection>

  <subsection>
    <title> Parametric Curves in 2D </title>

    <p>
      In mathematics and the sciences we sometimes introduce a new parameter <m>t</m>
      and write coordinates <m>x</m> and <m>y</m> in terms of that parameter.
      This is common for curves that are not functions of <m>x</m>, like circles or ellipses, or a nice way
      to model motion, where the <m>x</m> and <m>y</m> coordinate location of an object is the output at each input time <m>t</m>. 
      If you haven't seen this in a Trigonometry class, or if you need a refresher, check out <em>insert appendix stuff here</em>. 
     
      In mathematics these <em>parametric curves</em> or <em>space curves</em> are often written as a set of two parametric equations or a vector-valued function. 
    </p>

    <p>
      For example, we can graph a circle using 
      <me>\vec{r}(t)=\langle \cos(t), \sin(t)\rangle</me> or, equivalently,
      <md> 
        <mrow>
          x \amp= \cos(t)
        </mrow>
        <mrow>
          y \amp= \sin(t)
        </mrow>
      </md>
      for values of <m>t</m> in <m>[0,2\pi]</m>
    </p>

    <p>
      Matplotlib still graphs these curves by plotting points <m>(x,y)</m> using <c>plot</c> and connecting the dots, 
      which will make it easy to generalize these curves to 3D.
    </p>


    <sage>
      <input>
        import matplotlib.pyplot as plt
        import numpy as np
        fig = plt.figure() #create a figure
        ax = plt.axes() #add a graph
        
        T = np.linspace(0,2*np.pi, num=25) #parameter values
        X = np.cos(T) #x-values
        Y = np.sin(T) #y-values
        
        ax.plot(X,Y)
        plt.show()
      </input>
    </sage>

    <exercise>
      <p>
        Note that the above code graphs the unit circle. 
        Play with the above functions for <m>x</m> and <m>y</m> to see what other interesting curves you can graph.  
      </p>
      <p>
        In particular, when you have the parameter <m>t</m>, can you create 
        <ul>
          <li>
            a line?
          </li>
          <li>
            a different circle?
          </li>
          <li>
            a parabola?
          </li>
        </ul> 
      </p>
    </exercise>

  </subsection>
  
  <subsection xml:id="axes">
    <title>Labels and Axes</title>

    <p>
      You can easily add titles and label each axis using the commands <c>set_title("title_here")</c>, 
      <c>set_xlabel("label_here")</c>, <c>set_ylabel("label_here")</c>. 
      <em>Since the code below is longer, you might need to scroll to see all of the commands.</em> 
    </p>

    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #graph name used for plots and labels

        X = np.linspace(0,4,num=100) #determine inputs
        Y = -9.8*X**2+100 #determine outputs for y=-9.8x^2+3
        
        ax.set_title("Falling Body") #title
        ax.set_xlabel("Time (s)") #input label
        ax.set_ylabel("Height (m)") #output label

        ax.plot(X,Y) #Plot the connected dots
        plt.show() #display the result
      </input>
    </sage>

    <p>
      You can also adjust the tick marks on the axes, but it takes a little more work,
      and there are multiple approaches. 
    </p>

    <exercise>
      <p>Search online for a way to change the tick labels in Matplotlib. 
        Try and adjust the "Falling Body" graph to have tickmarks every quarter of a second.  
      </p>
    </exercise> 
    
    <p>
      Multiple graphs with separate axes can be added to the same figure using <c>plt.subplots()</c>, 
      which sets up the number of rows or columns of desired plots. 
      <em>Note the <c>axes()</c> function creates each separate graph and their individual axes. </em> 
    </p>

    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt 
        import numpy as np 
        fig = plt.figure() #create a figure
        #create two rows and one column of plots
        ax1 = plt.subplot(2,1,1)
        ax2 = plt.subplot(2,1,2)
        
        t = np.linspace(0,6,num=100) #determine inputs
        Y1 = np.sin(t) #determine outputs for y=sin(t)
        Y2 = np.cos(t) #determine outputs for y=cos(t)

        fig.suptitle('Vertically stacked subplots')
        ax1.set_ylabel('sine wave')
        ax2.set_ylabel('cosine wave')
        
        ax1.plot(t, Y1)
        ax2.plot(t, Y2)
        plt.show() #display the result
      </input>
    </sage>


  </subsection>

  <subsection xml:id="custom-graphs">
    <title>Customizing</title>

    <p>
      You can customize pretty much everything in each plot: colors, markers, line width and styles, etc.
      Below are a few examples.   
    </p>

    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add a graph
        X = np.array([1,2,3,4]) #determine inputs
        Y = np.array([4,2,0,1]) #determine outputs 
        
        ax.scatter(X,Y, marker="x") #scatterplot with x
        plt.show() #display the result
      </input>
    </sage> 
    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt #import pyplot
        import numpy as np 
        
        fig = plt.figure() #create a figure
        ax = plt.axes() #add a graph
        
        X = np.linspace(0,6,num=100) #determine inputs
        Y = np.sin(X) #determine outputs for y=sin(x)
        ax.plot(X,Y, color="orange", linestyle="--") #plot the connected dots on your graph

        ax.grid() #add a grid
        plt.axhline(0, color='black') #add horizontal axis
        plt.axvline(0, color='black') #add vertical axis
        
        plt.show() #display the result
      </input>
    </sage>

    <p>
      The comma separated list of possible commands inside the parentheses of a function like <c>plot()</c>
      are called the <em>arguments</em> of the function. The functions <c>plot</c> and <c>scatter</c>
      can take arguments like <c>color="color_here"</c>, <c>linestyle="style_here"</c>, <c>linewidth=number_here</c>,
      <c>marker="markertype_here"</c>. 
    </p>
    
  </subsection>

  <subsection xml:id="subsec-Vectorsin2D">
    <title>Vectors in 2D</title>
    <p>
      Matplotlib plots vectors using a function from pyplot called <c>quiver</c>, 
      which takes an initial coordinate, followed by the vector coordinates, to draw an arrow. 
      Since the axes of your graph are not determined by the input domain of a function, 
      you need to explicitly choose your axes limits using pyplot's <c>xlim</c> and <c>ylim</c>.
    </p>
    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt

        fig = plt.figure() #create a figure
        ax = plt.axes() #add a graph
        plt.xlim(-4, 4) #choose x window
        plt.ylim(-2, 4) #choose y window

        plt.quiver(0,0,1,3) #vector(1,3)

        plt.show()
      </input>
    </sage>
    <exercise>
      <p>
        Try various viewing windows in the above code. What do you notice about the size of your arrow? 
      </p>
    </exercise>
    <p>
      Since <c>quiver</c> is typically used for vector fields, the size scales automatically based on other elements of the graph. 
      Here we want to use the <m>xy</m>-axes as a fixed scale to draw the vectors, and so will include the arguments <c>angles='xy', scale_units='xy', scale=1</c> inside <c>quiver</c>.
    </p>
    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt

        fig = plt.figure() #create a figure
        ax = plt.axes() #add a graph
        plt.xlim(-4, 4) #x window
        plt.ylim(-2, 4) #y window

        #vector (1,3)
        plt.quiver(0,0,1,3,angles='xy', scale_units='xy', scale=1) 

        plt.show()
      </input>
    </sage>
    <exercise>
      <p>
        Try various vectors and viewing windows in the above code.  
      </p>
    </exercise>
    <p>
      For multiple vectors it can be helpful to color code and use pyplot's <c>grid()</c> and <c>legend()</c> feature.
    </p>
    
    <sage language='python'>
      <input>
        import matplotlib.pyplot as plt

        fig = plt.figure() #create a figure
        ax = plt.axes() #add a graph

        plt.xlim(-1, 4)
        plt.ylim(-2, 4)
        plt.grid()

        # original vectors
        plt.quiver(0,0,1,3,label='u',color='cyan', angles='xy', scale_units='xy', scale=1) 
        plt.quiver(1,3,2,-4,label='v',color='orchid', angles='xy', scale_units='xy', scale=1) 

        plt.legend() #Makes labels show up
        ax.set_title("Vectors") #title

        plt.show()
      </input>
    </sage>

    <exercise>
      <p>
        Try various vectors and viewing windows in the above code. 
        Also add a horizontal and vertical axis at <m>x=0</m> and <m>y=0</m> using the code found in the second 
        Customizing example.
      </p>
    </exercise>
    
  </subsection>

  <conclusion>
    <p>There are other ways to set up your figure and your axes in Matplotlib. 
      Some are shortcuts and Matplotlib will use default settings 
      (e.g. if we do not explicitly give inputs for the function we want to graph). 
      The approach in this section is very explicit, which makes it easier to understand how to control each feature as we get started.  
    </p>
  </conclusion>

  <assemblage><!--to assemble or summarize important connected ideas-->
    <title> Summary </title>
    <p>
      <ul>
        <li>
          <p>
            Every graph needs a figure object and a graph object. 
            The graph object will plot just the axes if no other information is given. 
          </p>
        </li>
        <li>
          <p>
              We graph a connected curve on our axes using <c>axes_name.plot(array x,array y)</c> for both 
              standard equations and parametric curves. 
          </p>
        </li>
        <li>
          <p>
              We graph a scatterplot on our axes using <c>axes_name.scatter(array x, array y)</c>. 
          </p>
        </li>
        <li>
          <p>
              We graph a parametric curve on our axes using <c>axes_name.plot(array x, array y)</c>. 
          </p>
        </li>
        <li>
          <p>
              We can use <c>numpy.linspace()</c> to efficiently create enough points for 
              <c>plot()</c> to connect the dots into a smooth-looking curve. 
          </p>
        </li>
        <li>
          <p>
            We can add titles and labels using <c>axes_name.set_title("Title")</c> or <c>axes_name.set_xlabel("input_label")</c>.
          </p>
        </li>
        <li>
          <p>
            We can customize color, linestyles, plotting styles, thickness, tickmarks, font sizes, etc.
            to make our graph exactly what we need for publication. 
          </p>
        </li>
        <li>
          <p>
            We can specify a viewing window using <c>xlim</c> and <c>ylim</c> and graph vectors using <c>quiver</c>.
          </p>
        </li>
      </ul>
    </p>
  </assemblage>

  <exercises xml:id="exercises-matplotlib2D">
    <exercise>
      <sage language='python'>
        <input>
          #
          #
          #
          #
          #
        </input>
      </sage>
      
    </exercise>
    
  </exercises>

</section>