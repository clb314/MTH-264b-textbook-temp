<?xml version="1.0" encoding="UTF-8" ?>
<!-- This file is part of the book                      -->
<!--                                                    -->
<!-- An Introduction to Matrix Computations in Python   -->
<!--                                                    -->
<!-- Copyright (C) 2024  LBCC                           -->
<!-- See the file copyright.txt for copying conditions. -->

<section xml:id="section-animation">
    
    <title>Basic Animation</title>

    <introduction>
        In this section we will create some basic animations,
        by creating frames for the animation in Matplotlib.
    </introduction>

    <objectives>
        <ul>
          <li>
            <p>
              Create an interactive plot with a slider.
            </p>
          </li>
          <li>
            <p>
              Create a gif animating a graph.
            </p>
          </li>
        </ul>
      </objectives>

      <subsection>
        <title>Animating in Matplotlib</title>

        <p>
          This first example uses <c>interact</c> to create a slider to plot one point at a time. 
          We will need to create two user defined (computer science) functions: 
          one that increments through the input points for the slider and 
          another that plots the graph for just those input points. 
        </p>
        <sage language='python'>
          <input>
            import matplotlib.pyplot as plt
            import numpy as np

            t = np.linspace(0, 6, 15) #inputs
            y = np.sin(t) #outputs           

            #define function that plots points up to user input
            def plot_data(current_t, current_y):
                fig = plt.figure() #create a figure
                ax = plt.axes() #add a graph to the figure
                ax.plot(current_t, current_y, "o", color='blue') 

                #set window, axis labels, title
                ax.set(xlim=[0,6], ylim=[-2,2], ylabel='Sine Wave', title="Dynamic Plot") 
                          
                plt.show() #display graph
            
            #define function to create points based on user input
            @interact() #create interactive element, this one is a slider
            def respond_to_user_input(frame=slider(1,15,1)): 
              
                #Get points up to frame user chooses.
                current_t = t[:frame]
                current_y = y[:frame]
                #Call our function that plots points        
                plot_data(current_t, current_y) 
          </input>
        </sage>

        <exercise>
          <ul>
            <li>
              <p>
                Play with various graph features and customizations. 
              </p>
            </li>
            <li>
              <p>
                Change the number of frames to see how the interactive is affected.
              </p>
            </li>
          </ul>
          <hint>
            <p>
              Try aligning and misaligning the number of frames and the number of inputs plotted.
            </p>
          </hint>

        </exercise>

        <p>
          Here is the same interactive for projectile motion.
        </p>

        <sage language='python'>
          <input>
            import matplotlib.pyplot as plt
            import numpy as np

            t_range = np.linspace(0, 3, 15) #time inputs
            #position based on initial velocity, gravity, and time elapsed
            g = -9.81 #approx gravity
            v0 = 12 #initial velocity
            y_range = g * t_range**2 / 2 + v0 * t_range 

            #Plot points up to frame user chooses
            def plot_data(current_t, current_y):
                fig = plt.figure() #create a figure
                ax = plt.axes() #add a graph to the figure
                ax.plot(current_t, current_y, "o-", color='blue')
                
                #set window, axis labels, title
                ax.set(xlim=[0,3], ylim=[-4,10], xlabel='Time (s)', ylabel='Height (m)', title="Projectile Motion")

                ax.grid(True) #show grid
                ax.legend([f"v0 = {v0} m/s"]) #create legend
              
                plt.show()  #display graph
              
            @interact() #create interactive element
            def respond_to_user_input(time=slider(1,15,1)):
              
                #Get data up to frame user chooses.
                current_t = t_range[:time]
                current_y = y_range[:time]
                #Call our function that plots data       
                plot_data(current_t, current_y) 
          </input>
        </sage>

        <p>
          Matplotlib has a module called <c>animation</c> 
          with a <c>FuncAnimation</c> class that allows you easily make frames of a graph. 
          A class called <c>PillowWriter</c> allows you to grab
          frames and save them to a file to make gifs.  
        </p>

        <sage language='python'>
          <input>
            import numpy as np
            from matplotlib import pyplot as plt
            from matplotlib import animation
            from matplotlib.animation import PillowWriter
            #PillowWriter used for creating gifs

            fig = plt.figure()
            ax = plt.axes()
            curve, = ax.plot([],[]) #create an empty graph to animate

            ax.set(xlim=(-5,5), ylim = (-5,5))

            #set up writer object to grab frames for a gif
            writer = PillowWriter(fps=15)

            x = [] #empty start
            y = []

            with writer.saving(fig, "sinWave.gif", 100): #100 is the dpi
              for xval in np.linspace(-5,5,100):
                x.append(xval)
                y.append(3*np.sin(xval))

                curve.set_data(x,y)

                writer.grab_frame() #grab current frame in figure for writer object

          </input> 
        </sage>

        <p>
          Here is an example animating two curves on the same graph. 
        </p>

        <sage language='python'>
          <input>
            import numpy as np
            from matplotlib import pyplot as plt
            from matplotlib import animation
            from matplotlib.animation import PillowWriter

            fig = plt.figure()
            ax = plt.axes()
            curve, = ax.plot([],[], label='sine') #create an empty graph to animate
            curve2, = ax.plot([],[],color='purple', linestyle='dashed', label='cosine')

            ax.set(xlim=[-5,5], ylim=[-5,5])
            ax.legend()

            #set up writer object to grab frames for a gif
            writer = PillowWriter(fps=15)

            x = [] #empty start
            y = []
            y2 = []

            with writer.saving(fig, "sincosWave.gif", 100): #100 is the dpi
              for xval in np.linspace(-5,5,100):
                x.append(xval)
                y.append(3*np.sin(xval))
                y2.append(3*np.cos(xval))

                curve.set_data(x,y)
                curve2.set_data(x,y2)

                writer.grab_frame() #grab current frame in figure for writer object

          </input> 
        </sage>

        <exercise>
          <p>
            What graph do <em>you</em> want to animate? Create it!  
          </p>
          
        </exercise>

      </subsection>


      <conclusion>
        <p>
          Matplotlib allows you to not only graph, but make your graphs interactive. 
          You can use <c>interact</c> to create interactive elements.
          The <c>animation</c> module can be used to animate your graphs.  
          Hopefully this is enough to get you started.
        </p>
      </conclusion>

      <assemblage><!--to assemble or summarize important connected ideas-->
        <title> Summary </title>
        <p>
        <ul>
          <li>
            <p>
              We can use <c>interact</c> to create a slider element and 
              create two user defined functions: one that takes the slider information 
              to create points and another that makes graphs for just those points. 
            </p>
          </li>
        </ul>
        <ul>
          <li>
            <p>
              The <c>FuncAnimation</c>> class can be used to animate your graphs and 
              <c>PillowWriter</c> saves those frames into a gif.
            </p>
          </li>
        </ul>
      </p>
      </assemblage>

      <exercises xml:id="exercises-animation">
        <exercise>
          <sage language='python'>
            <input>
              #
              #
              #
              #
              #
            </input>
          </sage>
          
        </exercise>
        
      </exercises>



</section>